Act as a django web developer. Here is a django app called risk_management. 

Here is the code. My question is at the end, after the code.

____________
In models.py;

from django.db import models


class Answer(models.Model):
    text = models.CharField(max_length=255)
    order = models.PositiveIntegerField(default=0)

    # next_question = models.ForeignKey('Question', on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return self.text

    class Meta:
        ordering = ['order']


class Question(models.Model):
    text = models.CharField(max_length=255)
    possible_answers = models.ManyToManyField(Answer)
    order = models.PositiveIntegerField(default=0)
    conditional_answer = models.ForeignKey(Answer, on_delete=models.SET_NULL, null=True, blank=True, related_name="followup_questions", help_text="Contingent Answer.")

    def __str__(self):
        return self.text

    class Meta:
        ordering = ['order', 'text']


class Meeting(models.Model):
    name = models.CharField(max_length=255)
    questions = models.ManyToManyField(Question)

    def __str__(self):
        return self.name


class Response(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    answer = models.ForeignKey(Answer, null=True, blank=True, on_delete=models.CASCADE)
    meeting = models.ForeignKey(Meeting, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True, verbose_name="Timestamp UTC")

    def __str__(self):
        return f"{self.meeting.name} - {self.question.text} - {self.answer.text}"



____________
In admin.py

from django.contrib import admin
from .models import Answer, Question, Meeting, Response


class AnswerInline(admin.TabularInline):  # or use admin.StackedInline for a different visual presentation
    model = Question.possible_answers.through
    extra = 1  # number of empty forms presented
    readonly_fields = ('id',)
    ordering = ['answer__order', 'answer__text']


@admin.register(Answer)
class AnswerAdmin(admin.ModelAdmin):
    # list_display = ['text', 'next_question']
    list_display = ['text', 'order']
    list_editable = ['order']


@admin.register(Question)
class QuestionAdmin(admin.ModelAdmin):
    # list_display = ['text']
    list_display = ['text', 'order']
    list_editable = ['order']
    filter_horizontal = ('possible_answers',)


@admin.register(Meeting)
class MeetingAdmin(admin.ModelAdmin):
    list_display = ['name']
    filter_horizontal = ('questions',)


@admin.register(Response)
class ResponseAdmin(admin.ModelAdmin):
    list_display = ['question', 'answer', 'meeting', 'timestamp']

    def timestamp(self, obj):
        return obj.timestamp
    timestamp.short_description = 'Timestamp UTC'



____________
In forms.py

from django import forms
from .models import Response


class QuestionnaireForm(forms.ModelForm):
    class Meta:
        model = Response
        fields = ['answer']

    answer = forms.ModelChoiceField(
        queryset=None,
        widget=forms.RadioSelect,
        required=False
    )

    def __init__(self, *args, **kwargs):
        question = kwargs.pop('question', None)
        super().__init__(*args, **kwargs)
        if question:
            self.fields['answer'].queryset = question.possible_answers.all().order_by('order')
            self.fields['answer'].label = question.text




____________
In views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Count
from .models import Meeting, Response, Question, Answer
from .forms import QuestionnaireForm
import plotly.offline as pyo
import plotly.graph_objs as go
import pandas as pd
# from django.contrib import messages


def questionnaire_view(request, meeting_id):
    # Retrieve the Meeting instance based on the provided meeting_id or raise a 404 error if not found
    meeting = get_object_or_404(Meeting, id=meeting_id)
    # Fetch all the questions related to the meeting, ordered by the 'order' field
    questions = meeting.questions.all().order_by('order')

    # If the request is POST and contains 'reset' in its POST data
    if request.method == 'POST' and 'reset' in request.POST:
        # Remove the question_index from the session, essentially resetting the form's progress
        request.session.pop('question_index', None)
        # Redirect the user back to the questionnaire page to start from the beginning
        return redirect('risk_management:questionnaire_view', meeting_id=meeting_id)

    # Get the current progress (which question is being displayed) from the session, defaulting to 0 (first question)
    question_index = request.session.get('question_index', 0)

    # If the question index goes beyond the available questions
    if question_index >= len(questions):
        # Remove the question_index from the session since all questions have been answered
        del request.session['question_index']
        request.session.pop('latest_question', None)  # Remove latest_question if it exists
        request.session.pop('latest_answer', None)    # Remove latest_answer if it exists
        # Redirect the user to the thank you page
        return redirect('risk_management:thank_you')

    # Retrieve the current question based on the index
    question = questions[question_index]

    # Loop to handle conditional questions
    while question and question.conditional_answer:
        # Get the previous question if there is one
        prev_question = questions[question_index - 1] if question_index > 0 else None
        if prev_question:
            # Fetch the response to the previous question for this meeting
            prev_response = Response.objects.filter(meeting=meeting, question=prev_question).first()
            # If the response to the previous question matches the condition to show the current question
            if prev_response and prev_response.answer == question.conditional_answer:
                break
            else:
                # Otherwise, increment the question index to skip to the next question
                question_index += 1
                # Check if we have gone beyond the available questions
                if question_index >= len(questions):
                    question = None
                else:
                    question = questions[question_index]
        else:
            break

    # If there's no valid question left to be displayed
    if not question:
        # Remove the question_index from the session
        del request.session['question_index']
        request.session.pop('latest_question', None)  # Remove latest_question if it exists
        request.session.pop('latest_answer', None)    # Remove latest_answer if it exists
        # Redirect the user to the thank you page
        return redirect('risk_management:thank_you')

    # If the request is a POST request (meaning the form has been submitted)
    if request.method == 'POST':
        form = QuestionnaireForm(request.POST, question=question)

        if form.is_valid():
            answer = form.cleaned_data['answer']
            # Create a new Response instance if an answer has been chosen
            if answer:
                Response.objects.create(
                    question=question,
                    answer=answer,
                    meeting=meeting
                )
                # Store the latest question and answer in session
                request.session['latest_question'] = question.text
                request.session['latest_answer'] = answer.text
            # Move on to the next question
            request.session['question_index'] = question_index + 1
            return redirect('risk_management:questionnaire_view', meeting_id=meeting_id)
    else:
        # If it's a GET request, instantiate the form for the current question
        form = QuestionnaireForm(question=question)

    # Render the questionnaire template, passing the form, meeting, and question to the context
    return render(request, 'risk_management/questionnaire.html',
                  {
                      'form': form,
                      'meeting': meeting,
                      'question': question,
                      'latest_question': request.session.get('latest_question'),
                      'latest_answer': request.session.get('latest_answer'),
                      'conditional': question.conditional_answer,
                  })


def thank_you_view(request):
    # Simply render the thank you page
    return render(request, 'risk_management/thank_you.html')


def data_view(request):
    # Aggregate your data here.
    # As an example, we'll count the number of responses for each answer.
    data = Response.objects.values('answer__text').annotate(count=Count('answer')).order_by('-count')
    questions = Response.objects.values_list('question__text', flat=True).distinct()
    # questions = Response.objects.values('question__text')

    # Extract data for plotting
    answers = [item['answer__text'] for item in data]
    counts = [item['count'] for item in data]

    # Create a bar plot
    trace = go.Bar(x=answers, y=counts)
    layout = go.Layout(title='Answers Distribution')
    fig = go.Figure(data=[trace], layout=layout)
    plot_div = pyo.plot(fig, output_type='div', show_link=False)

    # Pass the generated plot to the template
    return render(request, 'risk_management/dataview.html', context={
        'plot_div': plot_div,
        'questions': questions,
    })



____________
In urls.py

from django.urls import path
from . import views

app_name = 'risk_management'

urlpatterns = [
    path('questionnaire/<int:meeting_id>/', views.questionnaire_view, name='questionnaire_view'),
    path('thank_you/', views.thank_you_view, name='thank_you'),
    path('dataview/', views.data_view, name='data_view'),
    # Add more paths as needed
]


____________
In templates/questionnaire.html

{% extends 'home.html' %}

{% block content %}

        <div class="container">
            <div class="row">
                <div class="col py-5">
{#                    <h1>{{ meeting.name }} - {{ question.text }}</h1>#}
                    <h1>{{ meeting.name }}</h1>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="alert alert-info" role="alert">
                      This form does not collect ANY personal data. The only data collected are the responses and the meeting name (in the title above) that they are associated with.
                    </div>
                </div>
            </div>

            {% if latest_question and latest_answer %}
            <div class="row">
                <div class="col">
                    <div class="alert alert-success">
                        Previous:<br/>
                        {{ latest_question }} - {{ latest_answer }}
                    </div>
                </div>
            </div>
            {% endif %}

            {% if conditional %}
            <div class="row">
                <div class="col">
                    <div class="alert alert-success">
                        Previous:<br/>
                        {{ conditional }}
                    </div>
                </div>
            </div>
            {% endif %}

            <div class="row">
                <div class="col">
                    <form method="post">
                        {% csrf_token %}
                        {{ form.as_p }}
                        <button type="submit" name="next" value="Next" class="btn btn-primary">Next</button>
                        <button type="submit" name="reset" value="true" class="btn btn-warning float-end" >Reset</button>
                    </form>
                </div>
            </div>
        </div>

{% endblock content %}


____________
In templates/thank_you.html

{% extends 'home.html' %}

{% block content %}

  <h1>Thank You!</h1>
  <p>Your responses have been recorded.</p>

{% endblock content %}

____________

Here is my question. How do I generate a page of plot.ly graphs from the data collected in the answers?
